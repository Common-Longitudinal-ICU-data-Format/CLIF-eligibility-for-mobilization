## Load libraries

```{r}
# Load necessary libraries
packages <- c("duckdb", "lubridate", "tidyverse", "dplyr", "cmprsk", 
              "arrow", "bigreadr", "openxlsx",
              "stringr", "data.table", "jsonlite", "riskRegression")

install_if_missing <- function(package) {
  if (!require(package, character.only = TRUE)) {
    install.packages(package, dependencies = TRUE)
    library(package, character.only = TRUE)
  }
}
sapply(packages, install_if_missing)
```

```{r}
patel_data_filepath <- "../output/intermediate/competing_risk_patel_final.parquet"
team_data_filepath <- "../output/intermediate/competing_risk_team_final.parquet"
yellow_data_filepath <- "../output/intermediate/competing_risk_yellow_final.parquet"
green_data_filepath <- "../output/intermediate/competing_risk_green_final.parquet"
```

## Patel
```{r}
patel <- open_dataset(patel_data_filepath) |> collect()
patel_clean <- patel |> 
  select(encounter_block, t_event, outcome) |> 
  rename(time = t_event,
         status = outcome)

fit_patel <- cuminc(
  ftime = patel_clean$time,
  fstatus = patel_clean$status,
  cencode=0
)

plot(fit_patel, main="Cumulative Incidence (Chicago criteria)")
```

```{r}
patel_cause1 <- fit_patel[["1 1"]]
df_patel_cause1 <- data.frame(
  time = patel_cause1$time,
  est  = patel_cause1$est
)

if (!is.null(patel_cause1$lower) && !is.null(patel_cause1$upper)) {
  # The intervals exist already
  df_patel_cause1$lower <- patel_cause1$lower
  df_patel_cause1$upper <- patel_cause1$upper
} else if (!is.null(patel_cause1$var)) {
  # Use the "var" array with a normal approximation
  z_val <- 1.96   # for ~95% CI
  var_vec <- patel_cause1$var
  # est +/- z * sqrt(var)
  lower_approx <- df_patel_cause1$est - z_val * sqrt(var_vec)
  upper_approx <- df_patel_cause1$est + z_val * sqrt(var_vec)
  # clamp between [0,1]
  df_patel_cause1$lower <- pmax(0, lower_approx)
  df_patel_cause1$upper <- pmin(1, upper_approx)

} else {
  # no var => no intervals
  df_patel_cause1$lower <- NA
  df_patel_cause1$upper <- NA
}

cross_idx <- which(df_patel_cause1$est >= 0.5)
if (length(cross_idx) == 0) {
  patel_median_time <- Inf
} else {
  patel_median_time <- df_patel_cause1$time[cross_idx[1]]
}

cat("Median time to eligibility (Patel) =", patel_median_time, "hours\n")
readr::write_csv(df_patel_cause1, "../output/final/patel_cif.csv")

cat("Wrote CSV to output/final/patel_cif.csv\n")
```

## Team
```{r}
team <- open_dataset(team_data_filepath) |> collect()
team_clean <- team |> 
  select(encounter_block, t_event, outcome) |> 
  rename(time = t_event,
         status = outcome)

fit_team <- cuminc(
  ftime = team_clean$time,
  fstatus = team_clean$status,
  cencode=0
)

plot(fit_team, main="Cumulative Incidence (TEAM criteria)")
```

```{r}
team_cause1 <- fit_team[["1 1"]]
df_team_cause1 <- data.frame(
  time = team_cause1$time,
  est  = team_cause1$est
)

if (!is.null(team_cause1$lower) && !is.null(team_cause1$upper)) {
  df_team_cause1$lower <- team_cause1$lower
  df_team_cause1$upper <- team_cause1$upper
} else if (!is.null(team_cause1$var)) {
  # Use the "var" array with a normal approximation
  z_val <- 1.96   # for ~95% CI
  var_vec <- team_cause1$var
  # est +/- z * sqrt(var)
  lower_approx <- df_team_cause1$est - z_val * sqrt(var_vec)
  upper_approx <- df_team_cause1$est + z_val * sqrt(var_vec)
  # clamp between [0,1]
  df_team_cause1$lower <- pmax(0, lower_approx)
  df_team_cause1$upper <- pmin(1, upper_approx)

} else {
  # no var => no intervals
  df_team_cause1$lower <- NA
  df_team_cause1$upper <- NA
}
cross_idx <- which(df_team_cause1$est >= 0.5)
if (length(cross_idx) == 0) {
  team_median_time <- Inf
} else {
  team_median_time <- df_team_cause1$time[cross_idx[1]]
}

cat("Median time to eligibility (TEAM) =", team_median_time, "hours\n")
readr::write_csv(df_team_cause1, "../output/final/team_cif.csv")

cat("Wrote CSV to output/final/team_cif.csv\n")
```

## Yellow
```{r}
yellow <- open_dataset(yellow_data_filepath) |> collect()
yellow_clean <- yellow |> 
  select(encounter_block, t_event, outcome) |> 
  rename(time = t_event,
         status = outcome)

fit_yellow <- cuminc(
  ftime = yellow_clean$time,
  fstatus = yellow_clean$status,
  cencode=0
)

plot(fit_yellow, main="Cumulative Incidence (Yellow criteria)")
```

```{r}
yellow_cause1 <- fit_yellow[["1 1"]]
df_yellow_cause1 <- data.frame(
  time = yellow_cause1$time,
  est  = yellow_cause1$est
)

if (!is.null(yellow_cause1$lower) && !is.null(yellow_cause1$upper)) {
  df_yellow_cause1$lower <- yellow_cause1$lower
  df_yellow_cause1$upper <- yellow_cause1$upper
} else if (!is.null(yellow_cause1$var)) {
  # Use the "var" array with a normal approximation
  z_val <- 1.96   # for ~95% CI
  var_vec <- yellow_cause1$var
  # est +/- z * sqrt(var)
  lower_approx <- df_yellow_cause1$est - z_val * sqrt(var_vec)
  upper_approx <- df_yellow_cause1$est + z_val * sqrt(var_vec)
  # clamp between [0,1]
  df_yellow_cause1$lower <- pmax(0, lower_approx)
  df_yellow_cause1$upper <- pmin(1, upper_approx)

} else {
  # no var => no intervals
  df_yellow_cause1$lower <- NA
  df_yellow_cause1$upper <- NA
}
cross_idx <- which(df_yellow_cause1$est >= 0.5)
if (length(cross_idx) == 0) {
  yellow_median_time <- Inf
} else {
  yellow_median_time <- df_yellow_cause1$time[cross_idx[1]]
}

cat("Median time to eligibility (Yellow) =", yellow_median_time, "hours\n")
readr::write_csv(df_yellow_cause1, "../output/final/yellow_cif.csv")

cat("Wrote CSV to output/final/yellow_cif.csv\n")
```

# Green

```{r}
green <- open_dataset(green_data_filepath) |> collect()
green_clean <- green |> 
  select(encounter_block, t_event, outcome) |> 
  rename(time = t_event,
         status = outcome)

fit_green <- cuminc(
  ftime = green_clean$time,
  fstatus = green_clean$status,
  cencode=0
)

plot(fit_green, main="Cumulative Incidence (green criteria)")
```

```{r}
green_cause1 <- fit_green[["1 1"]]
df_green_cause1 <- data.frame(
  time = green_cause1$time,
  est  = green_cause1$est
)

if (!is.null(green_cause1$lower) && !is.null(green_cause1$upper)) {
  df_green_cause1$lower <- green_cause1$lower
  df_green_cause1$upper <- green_cause1$upper
} else if (!is.null(team_cause1$var)) {
  # Use the "var" array with a normal approximation
  z_val <- 1.96   # for ~95% CI
  var_vec <- green_cause1$var
  # est +/- z * sqrt(var)
  lower_approx <- df_green_cause1$est - z_val * sqrt(var_vec)
  upper_approx <- df_green_cause1$est + z_val * sqrt(var_vec)
  # clamp between [0,1]
  df_green_cause1$lower <- pmax(0, lower_approx)
  df_green_cause1$upper <- pmin(1, upper_approx)

} else {
  # no var => no intervals
  df_green_cause1$lower <- NA
  df_green_cause1$upper <- NA
}
cross_idx <- which(df_green_cause1$est >= 0.5)
if (length(cross_idx) == 0) {
  green_median_time <- Inf
} else {
  green_median_time <- df_green_cause1$time[cross_idx[1]]
}

cat("Median time to eligibility (green) =", green_median_time, "hours\n")
readr::write_csv(df_green_cause1, "../output/final/green_cif.csv")

cat("Wrote CSV to output/final/green_cif.csv\n")
```


```{r}
plot(
  fit_patel$`1 1`$time, fit_patel$`1 1`$est, 
  col = "maroon",
  type = "l",
  lty = 1,
  lwd = 2,
  xlab = "Time (hours)",
  ylab = "Cumulative Incidence Probability",
  main = "Competing Risk: All Criteria"
)

# Overlay TEAM
lines(
  fit_team$`1 1`$time, fit_team$`1 1`$est,
  col = "blue",
  lty = 1,
  lwd = 2
)

# Overlay Yellow
lines(
  fit_yellow$`1 1`$time, fit_yellow$`1 1`$est,
  col = "darkgoldenrod1",
  lty = 1,
  lwd = 2
)

#Overlay Green
lines(
  fit_green$`1 1`$time, fit_green$`1 1`$est,
  col = "darkgreen",
  lty = 1,
  lwd = 2
)

# Add a legend
legend("bottomright",
       legend = c("Patel","TEAM","Yellow","Green"),
       col    = c("maroon","blue","darkgoldenrod1","darkgreen"),
       lty = 1, lwd = 2)

cat("Median time to eligibility (Patel) =", patel_median_time, "hours\n")
cat("Median time to eligibility (TEAM) =", team_median_time, "hours\n")
cat("Median time to eligibility (Yellow) =", yellow_median_time, "hours\n")
cat("Median time to eligibility (Green) =", green_median_time, "hours\n")
```

```{r}
## ---- Save CIF figure ----------------------------------------------------
out_img <- "../output/final/cif_all_criteria.png"

# high‑resolution PNG (adjust size/resolution to taste)
png(filename = out_img,
    width    = 1800,          # pixels
    height   = 1200,
    res      = 200)           # dpi

par(mar = c(5, 5, 4, 2) + 0.1)   # a little extra bottom margin for the caption

## --- 1. main curve -------------------------------------------------------
plot(fit_patel$`1 1`$time,  fit_patel$`1 1`$est,
     col = "maroon",  type = "l", lty = 1, lwd = 2,
     xlab = "Time (hours)",
     ylab = "Cumulative Incidence Probability",
     main = "Competing Risk: All Criteria")

## --- 2. overlays ---------------------------------------------------------
lines(fit_team$`1 1`$time,   fit_team$`1 1`$est,
      col = "blue",          lty = 1, lwd = 2)

lines(fit_yellow$`1 1`$time, fit_yellow$`1 1`$est,
      col = "darkgoldenrod1", lty = 1, lwd = 2)

legend("bottomright",
       legend = c("Patel", "TEAM", "Yellow"),
       col    = c("maroon", "blue", "darkgoldenrod1"),
       lty    = 1, lwd = 2, bty = "n")

## --- 3. caption with median times ---------------------------------------
median_txt <- sprintf("Median time to eligibility   •   Patel: %s h   |   TEAM: %s h   |   Yellow: %s h",
                      ifelse(is.infinite(patel_median_time),  "Inf", round(patel_median_time, 1)),
                      ifelse(is.infinite(team_median_time),   "Inf", round(team_median_time,  1)),
                      ifelse(is.infinite(yellow_median_time), "Inf", round(yellow_median_time,1)))

mtext(median_txt, side = 1, line = 4, cex = 0.8)

dev.off()   # **important** – closes PNG and writes the file
cat("Saved figure to", out_img, "\n")

## ---- Save the medians to CSV -------------------------------------------
median_df <- data.frame(
  Criteria = c("Patel", "TEAM", "Yellow"),
  Median_hours = c(patel_median_time,
                   team_median_time,
                   yellow_median_time)
)

write.csv(median_df,
          file = "../output/final/cif_median_times.csv",
          row.names = FALSE)
cat("Saved medians to ../output/final/graphs/cif_median_times.csv\n")

```




```{r}
# # ─────────────────────────────────────────────────────────────────────────────
# #  1.  Pull out the CIFs (cause = 1) and combine
# # ─────────────────────────────────────────────────────────────────────────────
# get_cif_df <- function(fit_obj, label) {
#   out <- as.data.frame(fit_obj[["1 1"]][c("time", "est")])
#   names(out) <- c("time", "cif")
#   out$group  <- label
#   out
# }
# 
# cif_all <- bind_rows(
#   get_cif_df(fit_patel , "Patel"),
#   get_cif_df(fit_team  , "TEAM"),
#   get_cif_df(fit_yellow, "Yellow")
# )
# 
# # ─────────────────────────────────────────────────────────────────────────────
# #  2.  Determine the real study horizon
# # ─────────────────────────────────────────────────────────────────────────────
# t_max <- ceiling(max(cif_all$time, na.rm = TRUE))   # round up to next hour
# 
# # ─────────────────────────────────────────────────────────────────────────────
# #  3.  Plot with full follow‑up using ggplot2
# # ─────────────────────────────────────────────────────────────────────────────
# library(ggplot2)
# 
# ggplot(cif_all, aes(x = time, y = cif, colour = group)) +
#   geom_step(size = 1) +
#   scale_colour_manual(values = c(Patel = "maroon",
#                                  TEAM  = "blue",
#                                  Yellow = "darkgoldenrod1")) +
#   scale_x_continuous(limits = c(0, t_max),
#                      expand = expansion(mult = c(0, 0.02))) +
#   labs(title   = "Cumulative Incidence Function – full study duration",
#        x       = "Time (hours)",
#        y       = "Cumulative incidence (cause = 1)",
#        colour  = "Criteria") +
#   theme_classic(base_size = 12) +
#   theme(legend.position = "bottom")
```
### Sub hazard 

```{r}
library(arrow)
library(dplyr)
library(cmprsk)

# read the three parquet files you already created
patel  <- read_parquet("../output/intermediate/competing_risk_patel_final.parquet") |>
            mutate(group = "Patel")
team   <- read_parquet("../output/intermediate/competing_risk_team_final.parquet") |>
            mutate(group = "TEAM")
yellow <- read_parquet("../output/intermediate/competing_risk_yellow_final.parquet") |>
            mutate(group = "Yellow")
green <- read_parquet("../output/intermediate/competing_risk_green_final.parquet") |>
            mutate(group = "Green")

cr_data <- bind_rows(patel, team, yellow, green) |>
  select(encounter_block, t_event, outcome, group) |>
  mutate(group = factor(group, levels = c("Patel", "TEAM", "Yellow", "Green")))



fg <- crr(
  ftime   = cr_data$t_event,
  fstatus = cr_data$outcome,   # 1=event of interest, 2/3 competing
  cov1    = model.matrix(~ group, data = cr_data)[, -1]  # drop intercept
)
summary(fg)
```

```{r}
fg$ntot
```

# Business Hours 


```{r}
patel_data_biz_filepath <- "../output/intermediate/competing_risk_patel_final_biz.parquet"
team_data_biz_filepath <- "../output/intermediate/competing_risk_team_final_biz.parquet"
yellow_data_biz_filepath <- "../output/intermediate/competing_risk_yellow_final_biz.parquet"
```

####  Patel
```{r}
patel_biz <- open_dataset(patel_data_biz_filepath) |> collect()
patel_clean_biz <- patel_biz |> 
  select(encounter_block, t_event, outcome) |> 
  rename(time = t_event,
         status = outcome)

fit_patel_biz <- cuminc(
  ftime = patel_clean_biz$time,
  fstatus = patel_clean_biz$status,
  cencode=0
)

plot(fit_patel_biz, main="Cumulative Incidence (Chicago criteria)")
```

```{r}
patel_cause1 <- fit_patel[["1 1"]]
df_patel_cause1 <- data.frame(
  time = patel_cause1$time,
  est  = patel_cause1$est
)

if (!is.null(patel_cause1$lower) && !is.null(patel_cause1$upper)) {
  # The intervals exist already
  df_patel_cause1$lower <- patel_cause1$lower
  df_patel_cause1$upper <- patel_cause1$upper
} else if (!is.null(patel_cause1$var)) {
  # Use the "var" array with a normal approximation
  z_val <- 1.96   # for ~95% CI
  var_vec <- patel_cause1$var
  # est +/- z * sqrt(var)
  lower_approx <- df_patel_cause1$est - z_val * sqrt(var_vec)
  upper_approx <- df_patel_cause1$est + z_val * sqrt(var_vec)
  # clamp between [0,1]
  df_patel_cause1$lower <- pmax(0, lower_approx)
  df_patel_cause1$upper <- pmin(1, upper_approx)

} else {
  # no var => no intervals
  df_patel_cause1$lower <- NA
  df_patel_cause1$upper <- NA
}

cross_idx <- which(df_patel_cause1$est >= 0.5)
if (length(cross_idx) == 0) {
  patel_median_time <- Inf
} else {
  patel_median_time <- df_patel_cause1$time[cross_idx[1]]
}

cat("Median time to eligibility (Patel) =", patel_median_time, "hours\n")
readr::write_csv(df_patel_cause1, "../output/final/patel_cif.csv")

cat("Wrote CSV to output/final/patel_cif.csv\n")
```

## Team
```{r}
team <- open_dataset(team_data_filepath) |> collect()
team_clean <- team |> 
  select(encounter_block, t_event, outcome) |> 
  rename(time = t_event,
         status = outcome)

fit_team <- cuminc(
  ftime = team_clean$time,
  fstatus = team_clean$status,
  cencode=0
)

plot(fit_team, main="Cumulative Incidence (TEAM criteria)")
```

```{r}
team_cause1 <- fit_team[["1 1"]]
df_team_cause1 <- data.frame(
  time = team_cause1$time,
  est  = team_cause1$est
)

if (!is.null(team_cause1$lower) && !is.null(team_cause1$upper)) {
  df_team_cause1$lower <- team_cause1$lower
  df_team_cause1$upper <- team_cause1$upper
} else if (!is.null(team_cause1$var)) {
  # Use the "var" array with a normal approximation
  z_val <- 1.96   # for ~95% CI
  var_vec <- team_cause1$var
  # est +/- z * sqrt(var)
  lower_approx <- df_team_cause1$est - z_val * sqrt(var_vec)
  upper_approx <- df_team_cause1$est + z_val * sqrt(var_vec)
  # clamp between [0,1]
  df_team_cause1$lower <- pmax(0, lower_approx)
  df_team_cause1$upper <- pmin(1, upper_approx)

} else {
  # no var => no intervals
  df_team_cause1$lower <- NA
  df_team_cause1$upper <- NA
}
cross_idx <- which(df_team_cause1$est >= 0.5)
if (length(cross_idx) == 0) {
  team_median_time <- Inf
} else {
  team_median_time <- df_team_cause1$time[cross_idx[1]]
}

cat("Median time to eligibility (TEAM) =", team_median_time, "hours\n")
readr::write_csv(df_team_cause1, "../output/final/patel_cif.csv")

cat("Wrote CSV to output/final/team_cif.csv\n")
```

## Yellow
```{r}
yellow <- open_dataset(yellow_data_filepath) |> collect()
yellow_clean <- yellow |> 
  select(encounter_block, t_event, outcome) |> 
  rename(time = t_event,
         status = outcome)

fit_yellow <- cuminc(
  ftime = yellow_clean$time,
  fstatus = yellow_clean$status,
  cencode=0
)

plot(fit_yellow, main="Cumulative Incidence (Yellow criteria)")
```

```{r}
yellow_cause1 <- fit_yellow[["1 1"]]
df_yellow_cause1 <- data.frame(
  time = yellow_cause1$time,
  est  = yellow_cause1$est
)

if (!is.null(yellow_cause1$lower) && !is.null(yellow_cause1$upper)) {
  df_yellow_cause1$lower <- yellow_cause1$lower
  df_yellow_cause1$upper <- yellow_cause1$upper
} else if (!is.null(yellow_cause1$var)) {
  # Use the "var" array with a normal approximation
  z_val <- 1.96   # for ~95% CI
  var_vec <- yellow_cause1$var
  # est +/- z * sqrt(var)
  lower_approx <- df_yellow_cause1$est - z_val * sqrt(var_vec)
  upper_approx <- df_yellow_cause1$est + z_val * sqrt(var_vec)
  # clamp between [0,1]
  df_yellow_cause1$lower <- pmax(0, lower_approx)
  df_yellow_cause1$upper <- pmin(1, upper_approx)

} else {
  # no var => no intervals
  df_yellow_cause1$lower <- NA
  df_yellow_cause1$upper <- NA
}
cross_idx <- which(df_yellow_cause1$est >= 0.5)
if (length(cross_idx) == 0) {
  yellow_median_time <- Inf
} else {
  yellow_median_time <- df_yellow_cause1$time[cross_idx[1]]
}

cat("Median time to eligibility (Yellow) =", yellow_median_time, "hours\n")
readr::write_csv(df_yellow_cause1, "../output/final/yellow_cif.csv")

cat("Wrote CSV to output/final/yellow_cif.csv\n")
```


```{r}
plot(
  fit_patel$`1 1`$time, fit_patel$`1 1`$est, 
  col = "maroon",
  type = "l",
  lty = 1,
  lwd = 2,
  xlab = "Time (hours)",
  ylab = "Cumulative Incidence Probability",
  main = "Competing Risk: All Criteria"
)

# Overlay TEAM
lines(
  fit_team$`1 1`$time, fit_team$`1 1`$est,
  col = "blue",
  lty = 1,
  lwd = 2
)

# Overlay Yellow
lines(
  fit_yellow$`1 1`$time, fit_yellow$`1 1`$est,
  col = "darkgoldenrod1",
  lty = 1,
  lwd = 2
)

# Add a legend
legend(
  "bottomright",
  legend = c("Patel", "TEAM", "Yellow"),
  col = c("maroon", "blue", "darkgoldenrod1"),
  lty = 1,
  lwd = 2
)

cat("Median time to eligibility (Patel) =", patel_median_time, "hours\n")
cat("Median time to eligibility (TEAM) =", team_median_time, "hours\n")
cat("Median time to eligibility (Yellow) =", yellow_median_time, "hours\n")
```

```{r}
## ---- Save CIF figure ----------------------------------------------------
out_img <- "../output/final/cif_all_criteria.png"

# high‑resolution PNG (adjust size/resolution to taste)
png(filename = out_img,
    width    = 1800,          # pixels
    height   = 1200,
    res      = 200)           # dpi

par(mar = c(5, 5, 4, 2) + 0.1)   # a little extra bottom margin for the caption

## --- 1. main curve -------------------------------------------------------
plot(fit_patel$`1 1`$time,  fit_patel$`1 1`$est,
     col = "maroon",  type = "l", lty = 1, lwd = 2,
     xlab = "Time (hours)",
     ylab = "Cumulative Incidence Probability",
     main = "Competing Risk: All Criteria")

## --- 2. overlays ---------------------------------------------------------
lines(fit_team$`1 1`$time,   fit_team$`1 1`$est,
      col = "blue",          lty = 1, lwd = 2)

lines(fit_yellow$`1 1`$time, fit_yellow$`1 1`$est,
      col = "darkgoldenrod1", lty = 1, lwd = 2)

legend("bottomright",
       legend = c("Patel", "TEAM", "Yellow"),
       col    = c("maroon", "blue", "darkgoldenrod1"),
       lty    = 1, lwd = 2, bty = "n")

## --- 3. caption with median times ---------------------------------------
median_txt <- sprintf("Median time to eligibility   •   Patel: %s h   |   TEAM: %s h   |   Yellow: %s h",
                      ifelse(is.infinite(patel_median_time),  "Inf", round(patel_median_time, 1)),
                      ifelse(is.infinite(team_median_time),   "Inf", round(team_median_time,  1)),
                      ifelse(is.infinite(yellow_median_time), "Inf", round(yellow_median_time,1)))

mtext(median_txt, side = 1, line = 4, cex = 0.8)

dev.off()   # **important** – closes PNG and writes the file
cat("Saved figure to", out_img, "\n")

## ---- Save the medians to CSV -------------------------------------------
median_df <- data.frame(
  Criteria = c("Patel", "TEAM", "Yellow"),
  Median_hours = c(patel_median_time,
                   team_median_time,
                   yellow_median_time)
)

write.csv(median_df,
          file = "../output/final/cif_median_times.csv",
          row.names = FALSE)
cat("Saved medians to ../output/final/graphs/cif_median_times.csv\n")

```




```{r}
# ─────────────────────────────────────────────────────────────────────────────
#  1.  Pull out the CIFs (cause = 1) and combine
# ─────────────────────────────────────────────────────────────────────────────
get_cif_df <- function(fit_obj, label) {
  out <- as.data.frame(fit_obj[["1 1"]][c("time", "est")])
  names(out) <- c("time", "cif")
  out$group  <- label
  out
}

cif_all <- bind_rows(
  get_cif_df(fit_patel , "Patel"),
  get_cif_df(fit_team  , "TEAM"),
  get_cif_df(fit_yellow, "Yellow")
)

# ─────────────────────────────────────────────────────────────────────────────
#  2.  Determine the real study horizon
# ─────────────────────────────────────────────────────────────────────────────
t_max <- ceiling(max(cif_all$time, na.rm = TRUE))   # round up to next hour

# ─────────────────────────────────────────────────────────────────────────────
#  3.  Plot with full follow‑up using ggplot2
# ─────────────────────────────────────────────────────────────────────────────
library(ggplot2)

ggplot(cif_all, aes(x = time, y = cif, colour = group)) +
  geom_step(size = 1) +
  scale_colour_manual(values = c(Patel = "maroon",
                                 TEAM  = "blue",
                                 Yellow = "darkgoldenrod1")) +
  scale_x_continuous(limits = c(0, t_max),
                     expand = expansion(mult = c(0, 0.02))) +
  labs(title   = "Cumulative Incidence Function – full study duration",
       x       = "Time (hours)",
       y       = "Cumulative incidence (cause = 1)",
       colour  = "Criteria") +
  theme_classic(base_size = 12) +
  theme(legend.position = "bottom")
```
### Sub hazard 

```{r}
library(arrow)
library(dplyr)

# read the three parquet files you already created
patel  <- read_parquet("../output/intermediate/competing_risk_patel_final.parquet") |>
            mutate(group = "Patel")
team   <- read_parquet("../output/intermediate/competing_risk_team_final.parquet") |>
            mutate(group = "TEAM")
yellow <- read_parquet("../output/intermediate/competing_risk_yellow_final.parquet") |>
            mutate(group = "Yellow")

cr_data <- bind_rows(patel, team, yellow) |>
  select(encounter_block, t_event, outcome, group) |>
  mutate(group = factor(group, levels = c("Patel", "TEAM", "Yellow")))
```


```{r}
library(cmprsk)

fg <- crr(
  ftime   = cr_data$t_event,
  fstatus = cr_data$outcome,   # 1=event of interest, 2/3 competing
  cov1    = model.matrix(~ group, data = cr_data)[, -1]  # drop intercept
)
summary(fg)
```






